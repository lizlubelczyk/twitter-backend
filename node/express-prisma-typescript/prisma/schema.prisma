generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String    @unique
  name           String?   @db.VarChar(35)
  email          String    @unique
  password       String
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  private   Boolean  @default(false)

  reactions        Reaction[]
  sentMessages     Message[]  @relation(name: "MessageSender")
  receivedMessages Message[]  @relation(name: "MessageReceiver")
}

model Follow {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId String    @db.Uuid
  followedId String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedId])
}

model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId  String    @db.Uuid
  content   String    @db.VarChar(240)
  images    String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId String? @db.Uuid
  parent   Post?   @relation("PostComments", fields: [parentId], references: [id])
  comments Post[]  @relation("PostComments")

  reactions Reaction[]
}

model Reaction {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  type      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
}

enum ReactionType {
  LIKE
  RETWEET
}

model Message {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId   String    @db.Uuid
  receiverId String    @db.Uuid
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  sender   User @relation(name: "MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation(name: "MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}
